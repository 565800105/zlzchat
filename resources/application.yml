# 项目相关配置
jdsoft:
  # 名称
  name: 公众号信息管理系统
  # 版本
  version: 4.7.8
  # 版权年份
  copyrightYear: 2023
  # 实例演示开关
  demoEnabled: false
  # 文件路径 示例（ Windows配置D:/www/wwwroot/uploadPath，Linux配置 /www/wwwroot/uploadPath）
  profile: D:/www/wwwroot/uploadPath/
  # 获取ip地址开关
  addressEnabled: false
  # 后台路径
  adminPath: admin/
  # 允许文件扩展名
  fileExtension: ["bmp", "gif", "jpg", "jpeg", "png", "tif", "doc", "docx", "xls", "xlsx", "ppt", "pptx", "wps", "pdf", "rar", "zip", "gz", "mp3", "mp4"]
  # 允许文件名长度
  fileNameMaxLen: 100
  # 允许跨域访问域名（多个以,隔开）
  crosAllowedOrigin: "*"
  # 允许访问路径
  crosAllowedPath: "/**"
  masterDbType: "mysql" #主数据库类型 dm、mysql
  serverUrl: ${SERVER_URL}
  apiServerUrl: ${API_SERVER}
# 开发环境配置
server:
  # 服务器的HTTP端口，默认为80
  port: 8074
  servlet:
    # 应用的访问路径
    context-path: /
  undertow:
    # HTTP post内容的最大大小。当值为-1时，默认值为大小是无限的
    max-http-post-size: -1
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 512
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    io-threads: 8
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
    worker-threads: 256
    # 是否分配的直接内存
    direct-buffers: true
  #优雅关机，默认immediate为立即关机
  shutdown: graceful
# 日志配置
logging:
  level:
    cn.cnvp: debug
    org.springframework: warn

# 用户配置
user:
  password:
    # 密码错误{maxRetryCount}次锁定10分钟
    maxRetryCount: 5

# Spring配置
spring:
  liquibase:
    change-log: classpath:/liquibase/master.xml
  #设置优雅关机后，最大等待时间
  lifecycle:
    timeout-per-shutdown-phase: 60s
  # 模板引擎
  thymeleaf:
    mode: HTML
    encoding: utf-8
    # 禁用缓存
    cache: false
  # 资源信息
  messages:
    # 国际化资源文件路径
    basename: static/i18n/messages
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  # 文件上传
  servlet:
    multipart:
      # 单个文件大小
      max-file-size: 100MB
      # 设置总上传的文件大小
      max-request-size: 500MB
  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    druid:
      # 主库数据源
      master:
        url: jdbc:mysql://IP:端口/数据库名称?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
        username: 账号
        password: 密码
      # 从库数据源
      slave:
        # 从数据源开关/默认关闭
        enabled: false
        url:
        username:
        password:
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置连接超时时间
      connectTimeout: 30000
      # 配置网络超时时间
      socketTimeout: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /admin/druid/*
        # 控制台管理用户名和密码PROFILES
        login-username: system
        login-password: admin123
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
  # redis配置
  redis:
    database: 1
    host: 127.0.0.1
    port: 6379
    password: 123456 # 密码（默认为空）
    timeout: 3000 # 连接超时时长（毫秒）
    lettuce:
      pool:
        max-active: 100 # 连接池最大连接数（默认8）
        max-wait: -1 # 连接池最大等待时间(默认-1没有限制)毫秒
        max-idle: 8 # 连接池最大空闲连接（默认8）
        min-idle: 0 # 连接池最小空闲连接（默认0）
  # 服务模块
  devtools:
    restart:
      # 热部署开关
      enabled: true
  profiles:
    active: pro

# MyBatisPlus
mybatis-plus:
  mapper-locations: classpath*:mapper/**/*Mapper.xml
  typeAliasesPackage: cn.cnvp.**.domain #实体扫描，多个package用逗号或者分号分隔
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #是否将sql打印到控制面板
  global-config:
    refresh: true #刷新mapper 调试神器
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: auto
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: not_empty
      #驼峰下划线转换
      db-column-underline: true
      #数据库大写下划线转换
      #capital-mode: true
      #序列接口实现类配置
      #key-generator: com.baomidou.springboot.xxx
      #逻辑删除配置（下面3个配置）
      logic-delete-value: 1
      logic-not-delete-value: 0
      #数据库类型
      db-type: mysql
    #自定义SQL注入器
    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx

# PageHelper分页插件
pagehelper:
  helperDialect: mysql
  #reasonable: true #去除默认分页合理化参数
  supportMethodsArguments: true
  params: count=countSql

# Shiro
shiro:
  user:
    # 登录地址
    loginUrl: /admin/login
    # 权限认证失败地址
    unauthorizedUrl: /admin/unauth
    # 首页地址
    indexUrl: /admin/index
    # 验证码开关
    captchaEnabled: true
    # 验证码类型 math 数字计算 char 字符
    captchaType: char
  cookie:
    # 设置Cookie的域名 默认空，即当前访问的域名
    domain:
    # 设置cookie的有效访问路径
    path: /
    # 设置HttpOnly属性
    httpOnly: true
    # 设置Cookie的过期时间，天为单位
    maxAge: 30
    # 设置密钥，务必保持唯一性（生成方式，直接拷贝到main运行即可）Base64.encodeToString(CipherUtils.generateNewKey(128, "AES").getEncoded()) （默认启动生成随机秘钥，随机秘钥会导致之前客户端RememberMe Cookie无效，如设置固定秘钥RememberMe Cookie则有效）
    cipherKey:
  session:
    # Session超时时间，-1代表永不过期（默认30分钟）
    expireTime: 120
    # 同步session到数据库的周期（默认1分钟）
    dbSyncPeriod: 10
    # 相隔多久检查一次session的有效性，默认就是10分钟
    validationInterval: 30
    # 同一个用户最大会话数，比如2的意思是同一个账号允许最多同时两个人登录（默认-1不限制）
    maxSession: 1
    # 踢出之前登录的/之后登录的用户，默认踢出之前登录的用户
    kickoutAfter: false
  rememberMe:
    # 是否开启记住我
    enabled: true

# 防止XSS攻击
xss:
  # 过滤开关
  enabled: true
  # 排除链接（多个用逗号分隔）
  excludes: /admin/system/notice/*
  # 匹配链接
  urlPatterns: /admin/system/*,/admin/monitor/*,/admin/tool/*

# Swagger配置
swagger:
  enabled: false  # 是否开启swagger
# 优雅关机
management:
  endpoint:
    shutdown:
      enabled: true #开启shutdown
  endpoints:
    web:
      base-path: /admin/monitor
      exposure:
        include: "shutdown" # 暴露的端点

#前端Api配置
webApi:
  # 文件上传是否开启
  upload: false
  # 文件下载是否开启
  download: false
